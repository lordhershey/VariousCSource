mergesort.c is like the MacC mergesort, but it shows you the sorting going
on, you will see the sort go down to the leaves and then build back up. 

$ ./mergesort 5 6 2 78 4 3 4 6 89
5 6 2 78 4 3 4 6 89
^^^^ BEFORE
(V)   0 ..   4 ,   5 ..   8 : 5 6 2 78 4 3 4 6 89
(V)   0 ..   2 ,   3 ..   4 : 5 6 2 78 4
(V)   0 ..   1 ,   2 ..   2 : 5 6 2
(V)   0 ..   0 ,   1 ..   1 : 5 6
(^)   0 ..   0 ,   1 ..   1 : 5 6
(^)   0 ..   1 ,   2 ..   2 : 2 5 6
(V)   3 ..   3 ,   4 ..   4 : 78 4
(^)   3 ..   3 ,   4 ..   4 : 4 78
(^)   0 ..   2 ,   3 ..   4 : 2 4 5 6 78
(V)   5 ..   6 ,   7 ..   8 : 3 4 6 89
(V)   5 ..   5 ,   6 ..   6 : 3 4
(^)   5 ..   5 ,   6 ..   6 : 3 4
(V)   7 ..   7 ,   8 ..   8 : 6 89
(^)   7 ..   7 ,   8 ..   8 : 6 89
(^)   5 ..   6 ,   7 ..   8 : 3 4 6 89
(^)   0 ..   4 ,   5 ..   8 : 2 3 4 4 5 6 6 78 89
VVVV AFTER
2 3 4 4 5 6 6 78 89


mergesortvis show you to total list in memory after each iteration.

$ ./mergesortvis 63 4 206 716 432 4 1 3 0 85 66774 42 5 671
63 4 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 4 432 1 3 0 85 66774 42 5 671
4 63 206 716 1 4 432 3 0 85 66774 42 5 671
1 4 4 63 206 432 716 3 0 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 5 42 671
1 4 4 63 206 432 716 0 3 85 66774 5 42 671
1 4 4 63 206 432 716 0 3 5 42 85 671 66774
0 1 3 4 4 5 42 63 85 206 432 671 716 66774

visualsort is a mergesort, but instead of the sub sorting making a temp space
the array is sorted in place in an attempt to not create and destroy to see
if it could be as efficient which it is not, can come into big O N Squared 
territory. Items, Compares, and Operations are counted.

$ ./visualsort 63 4 206 716 432 4 1 3 0 85 66774 42 5 671
Merge Sort (recursive) Theta(N lg N)
63 4 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 4 432 1 3 0 85 66774 42 5 671
4 63 206 716 1 4 432 3 0 85 66774 42 5 671
1 4 4 63 206 432 716 3 0 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 42 5 671
1 4 4 63 206 432 716 0 3 85 66774 5 42 671
1 4 4 63 206 432 716 0 3 85 66774 5 42 671
1 4 4 63 206 432 716 0 3 5 42 85 671 66774
0 1 3 4 4 5 42 63 85 206 432 671 716 66774
Items : 14, Operations : 27 , Compares :  38
Insertion Sort (recursive) Omega(N*N)
63 4 206 716 432 4 1 3 0 85 66774 42 5 671
63 4 206 716 432 4 1 3 0 85 66774 42 5 671
63 4 206 716 432 4 1 3 0 85 66774 5 42 671
63 4 206 716 432 4 1 3 0 85 5 42 671 66774
63 4 206 716 432 4 1 3 0 5 42 85 671 66774
63 4 206 716 432 4 1 3 0 5 42 85 671 66774
63 4 206 716 432 4 1 0 3 5 42 85 671 66774
63 4 206 716 432 4 0 1 3 5 42 85 671 66774
63 4 206 716 432 0 1 3 4 5 42 85 671 66774
63 4 206 716 0 1 3 4 5 42 85 432 671 66774
63 4 206 0 1 3 4 5 42 85 432 671 716 66774
63 4 0 1 3 4 5 42 85 206 432 671 716 66774
63 0 1 3 4 4 5 42 85 206 432 671 716 66774
0 1 3 4 4 5 42 63 85 206 432 671 716 66774
Items : 14, Operations : 14 , Compares :  56
Merge Sort Theta(N Lg N)
63 4 206 716 432 4 1 3 0 85 66774 42 5 671
4 63 206 716 4 432 1 3 0 85 42 66774 5 671
4 63 206 716 1 3 4 432 0 42 85 66774 5 671
1 3 4 4 63 206 432 716 0 5 42 85 671 66774
0 1 3 4 4 5 42 63 85 206 432 671 716 66774
Items : 14, Operations : 14 , Compares :  40


